import * as util from "../../util";
import CPU from "../cpu";
import GameBoyCore from "../GameBoyCore";
export default class AudioController {
    channel3envelopeVolume: number;
    channel1FrequencyTracker: number;
    channel1DutyTracker: number;
    channel1CachedDuty: boolean[];
    channel1totalLength: number;
    channel1envelopeVolume: number;
    channel1envelopeType: boolean;
    channel1envelopeSweeps: number;
    channel1envelopeSweepsLast: number;
    channel1consecutive: boolean;
    channel1frequency: number;
    channel1SweepFault: boolean;
    channel1ShadowFrequency: number;
    channel1timeSweep: number;
    channel1lastTimeSweep: number;
    channel1Swept: boolean;
    channel1frequencySweepDivider: number;
    channel1decreaseSweep: boolean;
    channel2FrequencyTracker: number;
    channel2DutyTracker: number;
    channel2CachedDuty: boolean[];
    channel2totalLength: number;
    channel2envelopeVolume: number;
    channel2envelopeType: boolean;
    channel2envelopeSweeps: number;
    channel2envelopeSweepsLast: number;
    channel2consecutive: boolean;
    channel2frequency: number;
    channel3canPlay: boolean;
    channel3totalLength: number;
    channel3patternType: number;
    channel3frequency: number;
    channel3consecutive: boolean;
    channel3Counter: number;
    channel4FrequencyPeriod: number;
    channel4totalLength: number;
    channel4envelopeVolume: number;
    channel4currentVolume: number;
    channel4envelopeType: boolean;
    channel4envelopeSweeps: number;
    channel4envelopeSweepsLast: number;
    channel4consecutive: boolean;
    channel4BitRange: number;
    channel4VolumeShifter: number;
    channel1FrequencyCounter: number;
    channel2FrequencyCounter: number;
    channel3FrequencyPeriod: number;
    channel3lastSampleLookup: number;
    channel4lastSampleLookup: number;
    VinLeftChannelMasterVolume: number;
    VinRightChannelMasterVolume: number;
    mixerOutputCache: number;
    sequencerClocks: number;
    sequencePosition: number;
    channel4Counter: number;
    cachedChannel3Sample: number;
    cachedChannel4Sample: number;
    channel1Enabled: boolean;
    channel2Enabled: boolean;
    channel3Enabled: boolean;
    channel4Enabled: boolean;
    channel1canPlay: boolean;
    channel2canPlay: boolean;
    channel4canPlay: boolean;
    audioClocksUntilNextEvent: number;
    audioClocksUntilNextEventCounter: number;
    resamplerFirstPassFactor: number;
    channel1currentSampleLeft: any;
    leftChannel1: any;
    channel1currentSampleRight: any;
    rightChannel1: any;
    channel1currentSampleLeftSecondary: any;
    channel1currentSampleRightSecondary: any;
    channel1currentSampleLeftTrimary: any;
    channel1currentSampleRightTrimary: any;
    channel2currentSampleLeft: any;
    leftChannel2: any;
    channel2currentSampleRight: any;
    rightChannel2: any;
    channel2currentSampleLeftSecondary: any;
    channel2currentSampleRightSecondary: any;
    channel2currentSampleLeftTrimary: any;
    channel2currentSampleRightTrimary: any;
    channel3currentSampleLeft: any;
    leftChannel3: any;
    channel3currentSampleRight: any;
    rightChannel3: any;
    channel3currentSampleLeftSecondary: any;
    channel3currentSampleRightSecondary: any;
    channel4currentSampleLeft: any;
    leftChannel4: any;
    channel4currentSampleRight: any;
    rightChannel4: any;
    channel4currentSampleLeftSecondary: any;
    channel4currentSampleRightSecondary: any;
    downSampleInputDivider: number;
    device: any;
    channel3PCM: util.TypedArray;
    memory: util.TypedArray;
    gameboy: GameBoyCore;
    cpu: any;
    LSFR15Table: any;
    LSFR7Table: any;
    noiseSampleTable: any;
    bufferLength: number;
    audioTicks: number;
    audioIndex: number;
    bufferContainAmount: number;
    bufferPosition: number;
    downsampleInput: number;
    buffer: util.TypedArray;
    constructor({ cpu, gameboy }: {
        cpu: CPU;
        gameboy: GameBoyCore;
    });
    setMemory(memory: util.TypedArray): void;
    initMemory(): void;
    initStartState(): void;
    generate(numSamples: any): void;
    generateFake(numSamples: any): void;
    runJIT(): void;
    clockAudioEnvelope(): void;
    performChannel1AudioSweepDummy(): void;
    audioComputeSequencer(): void;
    clockAudioLength(): void;
    clockAudioSweep(): void;
    runAudioSweep(): void;
    computeChannels(): void;
    checkChannel1Enable(): void;
    cacheChannel1OutputLevel(): void;
    checkChannel1VolumeEnable(): void;
    cacheChannel1OutputLevelSecondary(): void;
    cacheChannel1OutputLevelTrimary(): void;
    checkChannel2Enable(): void;
    cacheChannel2OutputLevel(): void;
    checkChannel2VolumeEnable(): void;
    cacheChannel2OutputLevelSecondary(): void;
    cacheChannel2OutputLevelTrimary(): void;
    cacheChannel3Update(): void;
    checkChannel3Enable(): void;
    cacheChannel3OutputLevel(): void;
    channel3OutputLevelSecondaryCache(): void;
    checkChannel4Enable(): void;
    cacheChannel4Update(): void;
    cacheChannel4OutputLevel(): void;
    checkChannel4VolumeEnable(): void;
    cacheChannel4OutputLevelSecondary(): void;
    cacheMixerOutputLevel(): void;
    connectDevice(device: any): void;
    setVolume(volume: any): void;
    adjustUnderrun(): void;
    recalculateIterationClockLimitForAudio(audioClocking: any): void;
    outputAudio(): void;
    fillBuffer(): void;
    initBuffer(): void;
    generateWhiteNoise(): void;
    generateLSFR7Table(): util.TypedArray;
    generateLSFR15Table(): util.TypedArray;
}
