import MBC from "./mbc";
export default class RTC {
    lastTime: number;
    latchedLDays: any;
    latchedHours: any;
    latchedMinutes: any;
    latchedSeconds: any;
    latchedHDays: number;
    RTCDayOverFlow: boolean;
    RTCDays: number;
    RTCHours: any;
    RTCMinutes: number;
    RTCSeconds: number;
    RTCHalt: boolean;
    RTCisLatched: boolean;
    mbc: MBC;
    constructor(mbc: MBC);
    writeSeconds(data: any): void;
    writeMinutes(data: any): void;
    writeDaysLow(data: any): void;
    writeDaysHigh(data: any): void;
    writeHours(data: any): void;
    readSeconds(): any;
    readMinutes(): any;
    readHours(): any;
    readDaysLow(): any;
    readDaysHigh(): number;
    writeLatch(address: any, data: any): void;
    get(): Uint32Array;
    load(array: any): void;
    cutBatteryFileArray(data: ArrayBuffer): Uint32Array;
    extract(array: any): {
        seconds: any;
        minutes: any;
        hours: any;
        daysLow: any;
        daysHigh: any;
        latchedSeconds: any;
        latchedMinutes: any;
        latchedHours: any;
        latchedDaysLow: any;
        latchedDaysHigh: any;
        lastTime: number;
    };
    saveState(): any[];
    loadState(data: any): void;
    updateClock(): void;
}
