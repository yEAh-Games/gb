import { Debounced } from "./util";
import LocalStorage from "./storages/LocalStorage";
import Cartridge from "./core/cartridge/index";
import Actions from "./actions";
import { EventEmitter } from "events";
import GameBoyCore from "./core/GameBoyCore";
export default class GameBoy extends EventEmitter {
    interval: number;
    debouncedAutoSave: Debounced;
    buttons: string[];
    core: GameBoyCore;
    isOn: boolean;
    actions: Actions;
    storage: LocalStorage;
    cartridge: Cartridge;
    lastRun: number;
    constructor({ audio, isPaused, lcd, isSoundEnabled, bootRom }?: any);
    isPaused(): boolean;
    setStorage(storage: any): void;
    registerActions(): void;
    handleSpeed(options: any): void;
    turnOn(): void;
    turnOff(): void;
    restart(): void;
    replaceCartridge(cartridge: Cartridge | ArrayBuffer | Uint8Array): void;
    removeCartridge(): void;
    insertCartridge(cartridge: Cartridge | ArrayBuffer | Uint8Array): void;
    actionDown(action: any, options?: any): void;
    actionChange(action: any, options: any): void;
    actionUp(action: any, options?: any): void;
    setSpeed(multiplier: any): void;
    autoSave(): void;
    saveState(state: any): Promise<boolean>;
    saveSRAM(sram?: any): Promise<boolean>;
    saveRTC(rtc?: any): Promise<boolean>;
    loadState(state: any): boolean;
    loadSRAM(sram?: any): boolean;
    loadRTC(rtc?: any): boolean;
    getBatteryFileArrayBuffer(): ArrayBuffer;
    loadBatteryFileArrayBuffer(data: ArrayBuffer): Promise<void>;
    requestFrame(fn: (now: number) => void): void;
}
